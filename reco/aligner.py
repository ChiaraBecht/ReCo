# pylint: disable=line-too-long

"""Bowtie2 aligner class for ReCo."""

import subprocess

from .attribute_descriptors import LoggerDesc
from .reco_config import Config


class Bowtie2Aligner:
    """Bowtie2 aligner class for ReCo.

    Parameters
    ----------
    logger : logging.Logger
        A logging.Logger object.
    seed_length : int
        Bowtie2 seed length parameter.
    seed_mismatch : int
        Bowtie2 seed mismatch parameter.
    interval_function:
        Bowtie2 interval function parameter
    bowtie2_index : str
        Path to a bowtie2 library index.
    final_trimmed_file : str
        Path to the final trimmed file.
    sam_file : str
        Path to the SAM file containing the alignments generated by Bowtie2.
    """

    logger = LoggerDesc()

    def __init__(
        self,
        logger=None,
        seed_length=Config.BOWTIE2_SEED_LENGTH,
        seed_mismatch=Config.BOWTIE2_SEED_MISMATCH,
        interval_function=Config.BOWTIE2_INTERVAL_FUNCTION,
        bowtie2_index=None,
        final_trimmed_file=None,
        sam_file=None,
    ):
        self.logger = logger
        self.final_fastq = final_trimmed_file

        self.command = [
            "bowtie2",
            "--local",
            "--norc",
            "-L",
            str(seed_length),
            "-N",
            str(seed_mismatch),
            "-i",
            interval_function,
            "-q",
            "-x",
            bowtie2_index,
            "-U",
            final_trimmed_file,
            "-S",
            sam_file,
            "-p",
        ]

    def run(self, cores=1):
        """
        Run the Bowtie2 aligner.

        Parameters
        ----------
        cores : int
            Number of cores to utilize.

        Returns
        -------

        """
        command = self.command + [str(cores)]
        print("ALIGNER:", command)
        with subprocess.Popen(
            command, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        ) as proc:
            out, error = proc.communicate()
            bowtie2_output = error.decode("utf-8")
            self.logger.info(bowtie2_output)

    def __repr__(self):
        """Representation."""
        return f"{self.__class__.__name__}"

    def __str__(self):
        """String representation."""
        return f"<{self.__class__.__name__}>"
